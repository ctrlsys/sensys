.\"
.\" Copyright (c) 2004-2007 The Trustees of Indiana University and Indiana
.\"                         University Research and Technology
.\"                         Corporation.  All rights reserved.
.\" Copyright (c) 2008-2009 Sun Microsystems, Inc.  All rights reserved.
.\" Copyright (c) 2014      Intel, Inc.  All rights reserved.
.\"
.\" Man page for ORCM's octl command
.\"
.\" .TH name     section center-footer   left-footer  center-header
.TH octl 1 "#ORCM_DATE#" "#PACKAGE_VERSION#" "#PACKAGE_NAME#"
.\" **************************
.\"    Name Section
.\" **************************
.SH NAME
.
octl \- Admin command line utility for ORCM
.
.PP
.
.\" **************************
.\"    Synopsis Section
.\" **************************
.SH SYNOPSIS
.
.B octl
.B [ options ]
.
.\" **************************
.\"    Options Section
.\" **************************
.SH Options
.
\fIoctl\fR admin command line utility for ORCM.  This utility can work in both
an interactive mode to help the user build up the subcommand or in a one-shot
mode where the user specifies the complete subcommand on the command line.
.
.TP 10
.B -h | --help
Display help for this command.
.
.
.TP
.B -V | --version
Display version for this command.
.
.
.TP
.B -mca | --mca <key> <value>
Send arguments to various MCA modules.
.
.PP
.SH Interactive
.PP
The interactive mode of the utility is invoked by running the command without
any subcommands. Optional arguments such as MCA parameters can be specified as
well.
.PP
Once in the interactive shell, the \fItab\fR key can be used to either
autocomplete unambiguous partial commands or list possible completions for
ambiguous partial commands. The \fI?\fR key will display more information about
all of the commands at the current hierarchy.
.PP
To exit the interactive mode without running a command, either type \fIctrl-c\fR
or enter an empty subcommand.
.PP
.
.SH Subcommands
The subcommands of the command line interface are organized in a hierarchy.  All
commands within the hierarchy specify the final full command.
.SS resource
.
.
The \fIresource\fR command set is used to display information about the resources
(nodes) configured in the system.
.TP
.SS status
\fIstatus\fR lists connection state (either up, down or unknown) and the job state
(allocated or unallocated). The node specification is an ORCM node regex.
.PP
For example:
.
.TP 4
octl resource status
.PP
.SS queue
.
The \fIqueue\fR command set displays information about the currently configured
queues as well as the sessions within each queue.
.TP
.SS status
\fIstatus\fR lists current queues and sessions within the queues.
.PP
For example:
.
.TP 4
octl queue status
.PP
.SS session
.
The \fIsession\fR command set allows admin to modify previously submitted
sessions.
.TP
.SS cancel <session-id>
\fIcancel\fR specified running or pending session.
.PP
For example:
.
.TP 4
octl session cancel 199
.PP
.SS diag
.
The \fIdiag\fR command set allows admin to run diagnostics on a remote Open RCM
daemon.  These commands require a node regex specification for determining which
remote daemons to run on.  See the ORCM Node Regex section for details on how
to construct the regex.
.TP
.SS cpu <noderegex>
\fIcpu\fR runs cpu diagnostics on remote daemons.
.PP
For example:
.
.TP 4
octl diag cpu node[3:2-10]
.TP
.SS eth
\fIeth\fR runs ethernet diagnostics on remote daemons.
.PP
For example:
.
.TP 4
octl diag eth node001
.TP
.SS mem
\fImem\fR runs memory diagnostics on remote daemons.
.PP
For example:
.
.TP 4
octl diag mem node[2:1-3]
.PP
.SS power
.
The \fIpower\fR command set allows admin to modify power settings.
.TP
.SS set <Watts>
\fIset\fR global power budget to specified wattage.
.PP
For example:
.
.TP 4
octl power set 1000
.TP
.SS get
\fIget\fR current global power budget.
.PP
For example:
.
.TP 4
octl power get
.PP
.SS analytics
.
The \fIanalytics\fR command allows the user to add/remove/get
workflows from any management node on a cluster.
.PP
For example:
.
.TP 4
octl workflow add workflow.xml [aggregator]
.B after using the command, user will be able to see the workflow_id on
the console. Here aggregator is an optional field
.PP
.
.TP 4
octl workflow list aggregator
.B lists the workflow name and workflow id of all workflows in the
specified aggregator
.PP
.
.TP 4
octl workflow remove aggregator workflow_id workflow_num
.B Removes workflow with specified workflow_id and workflow_num from
aggregator. "*" is used as wild characted in workflow id and workflow number
to remove multiple workflows at a time
.PP
.SS notifier
.
The \fInotifier\fR command allows the user to set/get
notifier policies on any management node on a cluster.
.PP
For example:
.
.TP 4
notifier set policy emerg  smtp   rack[2:1-8]
notifier set policy alert  smtp   rack[2:1-8]
notifier set policy crit   smtp   rack[2:1-8]
notifier set policy error  syslog rack[2:1-8]
notifier set policy warn   syslog rack[2:1-8]
notifier set policy notice syslog rack[2:1-8]
notifier set policy debug  syslog rack[2:1-8]
.B the above commands sets the policies for each severity level
notification policies to 'smtp' for sending email notification
and 'syslog' for sending to syslog.
.PP
For example:
.
.TP 4
notifier get policy rack[2:1-8]
.B the above commands shows the notification policies for 
each severity level for the given nodelist.
.PP
For example:
.
notifier set smtp-policy server_name <email-server>  rack[2:1-8]
notifier set smtp-policy server_port <portno>  rack[2:1-8]
notifier set smtp-policy to_addr <email-addr>  rack[2:1-8]
notifier set smtp-policy from_addr <email-addr>  rack[2:1-8]
notifier set smtp-policy from_name <name>  rack[2:1-8]
notifier set smtp-policy subject <email-subject>  rack[2:1-8]
notifier set smtp-policy body_preffix <email-body-preffix>  rack[2:1-8]
notifier set smtp-policy body_suffix <email-body-suffix>  rack[2:1-8]
notifier set smtp-policy priority <1-high,2-medium,3-low>  rack[2:1-8]
.B the above commands sets the notifier smtp email server 
.PP
For example:
.
.TP 4
notifier get smtp-policy rack[2:1-8]
.B the above commands shows the smtp email server configuration
for the given nodelist.
.PP
.SS sensor inventory listing
.
This command is designed to retrieve from the inventory database the list of
sensors for given node(s) that can be used in the analytics plugins.
.PP
.TP 4
The command and interactive shell is:
.B octl sensor get inventory <node-regex|logical-group> [sensor_search_string]
.PP
For example:
.
.TP 4
octl sensor get inventory node01 ip

.PP
.SS sensor policy listing
.
This command is designed to retrieve the policies regarding the sensor samples for a list of nodes.
.PP
.TP 4
The command and interactive shell is:
.B octl sensor get policy <node-regex|logical-group>
.PP
For example:
.
.TP 4
octl sensor get policy c[2:1-10]

.PP
.SS sensor sample rate listing
.
This command is designed to retrieve the sample rate for the individual sensor for a list of nodes.
.PP
.TP 4
The command and interactive shell is:
.B octl sensor get sample-rate <sensor-name> <node-regex|logical-group>
.PP
For example:
.
.TP 4
sensor get sample-rate base c[2:1-10]
sensor get sample-rate coretemp c[2:1-10]
sensor get sample-rate freq c[2:1-10]

.PP
.SS sensor sample rate setting
.
This command is designed to set the sample rate for the individual sensor for a list of nodes. Note
that for per sensor (e.g. coretemp, freq) sample rate, this command will take effect only if the
sensor is started in a progess thread. The setting of the base sample rate does not have this
requirement.
.PP
.TP 4
The command and interactive shell is:
.B octl sensor set sample-rate <sensor-name> <node-regex|logical-group>
.PP
For example:
.
.TP 4
sensor set sample-rate base 10 c[2:1-10]

.PP
.TP 4
Setting per sensor sample rate in the examples below will take effect only if the sensor is
started in a progess thread
.PP
For example:

.
.TP4
sensor set sample-rate coretemp 10 c[2:1-10]
sensor set sample-rate freq 10 c[2:1-10]

."================================================================================

.SS sensor enable|disable|reset datagroups
.
This command is designed to enable, disable, or reset to sensor sampling for
datagroups (plugin names).  The orcmd service startup state of the sensor data sampling
is controlled by the following set of MCA paramaters:
.PP
.B sensor_<sensor_name|"base">_collect_metrics = <"true"|"false">
.PP
Using "base" turns on ("true") or off ("false") all sensors loaded using the "sensor"
MCA parameter (Only loaded sensors can be controlled not plugins excluded from being
loaded).  Using the sensor_name instead of "base" overrides the sensor_base_collect_metrics
MCA parameter.  The default values of individual datagroup (plugin) is inherited from
sensor_base_collect_metrics at orcmd service load time.  This command requires the
orcmsched be running in the cluster.
.PP
The commands and interactive shell is:
.TP
.B octl sensor {enable|disable|reset} {node-regex|logical-group}
.B {datagroup|"all"}
.PP
For example:
.PP
.B $ octl sensor disable node01 all
.br
.B $ octl sensor enable node01 errcounts
.PP
After these commands node01 will only be logging data from the errcounts datagroup (plugin).
Then:
.PP
.B $ octl sensor reset node01 all
.PP
restores node01 to its original sampling state (defined by MCA parameters and orcmd load time).
.PP
For finer control the following syntax can be used
.TP
.B octl sensor {enable|disable|reset} {node-regex|logical-group}
.B {datagroup|"all"}:{sensor-label-name}
.PP
where sensor-label-name is and individual label from the datagroup.  This effectively gives control over individual sensor data items.  For example in the _coretemp_ _datagroup_ the sensor labels use the naming convention "coreN" where N is the zero based core number.  So the following steps will have orcmd sample only "core3" from the "coretemp" datagroup on "node01".
.PP
.B $ octl sensor disable node01 all
.br
.B $ octl sensor enable node01 errcounts:core3
.PP
The string "all" can also be used for labels except when the datagroup is specified as "all".  Using "all:all" is not legal, instead just use "all".  Also using "all:{sensor-label-name}" is not legal since there is no commonality of sensor-label-name between datagroups.
.PP
Not all current sensor datagroups respond to sensor sampling control.  Notable exceptions are
.TP
.B    heartbeat -
This is not a real senor datagroup.
.TP
.B dmidata   -
No control possible as this doesn't collect periodic data.
.TP
.B resusage  -
Only datagroup control.  No sensor level control possible.
.TP
.B nodepower -
Only datagroup control.  Only one sensor label is returned.
.TP
.B mcedata   -
Only datagroup control.  Only one sensor label is returned.
.TP
.B syslog    -
Only datagroup control.  Only one sensor label is returned.
.PP

."================================================================================

.SS sensor store environment_only|event_only|all|none nodelist
.
This command is designed to control the storage of environment (raw) and event (event) data
.PP
For Example, when you want to enable storage of environment data in Database, use the following command
.B $ octl sensor store environment_only node001
.PP
.PP
When you want to disable storage of event and environment data in Database, use the following command
.B $ octl sensor store none node001
.PP
.SS query
.
This component is used to query the database in order to obtain basic information
of the nodes and its sensors.
.
In order to get the query component working you need to meet this environment:
.
.TP 10
.B *Set the following mca parameters for the scheduler on the orcm-site.xml
xml <mca-params> <value>db_postgres_user=orcmuser:orcmpassword,db_postgres_database=orcmdb,
</mca-params>
.
.
.TP
.B *Launch an orcmsched service:
$ bin/orcmsched
.
.
.TP
.B *Launch an octl console to call the service:
$ bin/octl
.
.
.PP
\fIquery commands:\fR
.PP
.TP
.SS *history:
.RS
- syntax: octl query history [start-date start-time end-date end-time]
<nodelist>
.RE
.RS
- use: returns all the data logged by the provided nodes during
the specified time.
.RE
.RS
- example: octl query history 2015-11-13 15:00:00 2015-11-13 16:00:00
master4
.RE
.RS
- output: NODE,SENSOR,DATE_TIME,VALUE master4,procstat_orcmd_pid,2015-10-21
          15:31:47.217703,11960, master4,procstat_running_processes,2015-10-21
          15:31:48.219033,0, master4,procstat_zombie_processes,2015-10-21
          15:31:48.219033,0, 3 rows were found (0.091 seconds)
.RE
.PP
.TP
.SS *sensor:
.RS
- syntax: octl query sensor <sensor-name> [start-date start-time end-date end-time
[upper-bound lower-bound]] <nodelist>
.RE
.RS
- use: returns the logged data corresponding to the given sensor, time and node list.
.RE
.RS
- example: octl query sensor coretemp* 2015-11-13 14:00:00 2015-11-13 16:00:00 0.1 1
master4
.RE
.RS
- output: NODE,SENSOR,DATE_TIME,VALUE master4,coretemp_core
          0,2015-10-21 15:31:38.212171,35,degrees C master4,coretemp_core
          1,2015-10-21 15:31:38.212171,35,degrees C master4,coretemp_core
          2,2015-10-21 15:31:38.212171,35,degrees C master4,coretemp_core
          3,2015-10-21 15:31:38.212171,35,degrees C ... 10 rows
          were found (0.141 seconds)
.RE
.PP
.TP
.SS *log:
.RS
- syntax: octl query log [search word] <nodelist>
.RE
.RS
- use: returns the logged data coming from the syslog of the given nodes
  and search word.
.RE
.RS
- example: octl query log *access* master4,c01
.RE
.RS
- output: NODE,SENSOR_LOG,MESSAGE master4,syslog_log_message_0,<86>Oct
          28 08:30:29 c01: access granted for user root (uid=0)
          c01,syslog_log_message_0,<86>Oct 28 08:30:33 master4:
          access granted for user root (uid=0) 2 rows were found
          (0.056 seconds)
.RE
.PP
.TP
.SS *idle:
.RS
- syntax: octl query idle [minimum idle time in seconds or HH:MM:SS
format] <nodelist>
.RE
.RS
- use: returns the logged data coming from the syslog of the given nodes and
search word.
.RE
.RS
- example: octl query idle 60 master4
.RE
.RS
- output: NODE,IDLE_TIME master4,03:13:59.024666 1 rows were
          found (0.016 seconds)
.RE
.PP
.TP
.SS *status:
.RS
- syntax: octl query node status <nodelist>
.RE
.RS
- use: Returns the status logged in the data base for the nodes in.
.RE
.RS
- example: octl query node status master4
.RE
.RS
- output: There is no output for now as this query returns the field “status” on
the “node” table and this field is not being populated yet.
.RE
.PP
.TP
.SS *event:
.RS
1.-data:
.RE
.RS
.RS
- sintax: octl query event data [start-date start-time end-date end-time] <nodelist>
.RE
.RE
.RS
.RS
- use: Returns events from database.
.RE
.RE
.RS
.RS
- example: octl query event data 2016-02-16 08:22:00 2016-02-16 08:22:14 master4
.RE
.RE
.RS
.RS
- output: EVENT_ID,DATE_TIME,SEVERITY,TY:PE,HOSTNAME,EVENT_MESSAGE
          66846,2016-02-16 08:22:04,CRITICAL,EXCEPTION,master4,core 0 value 44.00 degrees C,greater than threshold 25.00 degrees C
          66847,2016-02-16 08:22:04,CRITICAL,EXCEPTION,master4,core 1 value 42.00 degrees C,greater than threshold 25.00 degrees C
          66865,2016-02-16 08:22:09,CRITICAL,EXCEPTION,master4,core 2 value 44.00 degrees C,greater than threshold 25.00 degrees C
          66866,2016-02-16 08:22:09,CRITICAL,EXCEPTION,master4,core 3 value 41.00 degrees C,greater than threshold 25.00 degrees C
          66881,2016-02-16 08:22:09,CRITICAL,EXCEPTION,master4,core 4 value 45.00 degrees C,greater than threshold 25.00 degrees C
          66882,2016-02-16 08:22:09,CRITICAL,EXCEPTION,master4,core 5 value 46.00 degrees C,greater than threshold 25.00 degrees C
          6 rows were found (0.396 seconds)
.RE
.RE
.RS
2.-sensor-data:
.RE
.RS
.RS
- sintax: octl query event sensor-data <event-id> before/after <minutes> <sensor> <nodelist>
.RE
.RE
.RS
.RS
- use: Returns the sensor data around an event.
.RE
.RE
.RS
.RS
- example: octl query event sensor-data 1 after 10 coretemp* master4
.RE
.RE
.RS
.RS
- output: DATE_TIME,HOSTNAME,DATA_ITEM,VALUE,UNITS
          2016-02-09 13:53:52,master4,coretemp_core 0,23,degrees C
          2016-02-09 13:53:52,master4,coretemp_core 1,23,degrees C
          2016-02-09 13:53:52,master4,coretemp_core 2,23,degrees C
          3 rows were found (0.396 seconds)
.RE
.RE



.PP
.
.\" **************************
.\"    Description Section
.\" **************************
.SH DESCRIPTION
.
.PP
\fIoctl\fR is an admin level tool for interacting with ORCM. This tool has the
ability to run as an interactive shell or as a single one-shot command.
Currently the tools provides information about configured resources, sessions,
and queues. This tool is also for managing resource, policies, and sessions at
the admin level.
.
.
.SS Setting MCA Parameters
.
The \fI--omca\fP switch allows the passing of parameters to various MCA
(Modular Component Architecture) modules.
MCA modules allow tunable parameters to be set at run time.
.PP
The \fI--omca\fP switch takes two arguments: \fI<key>\fP and \fI<value>\fP.
The \fI<key>\fP argument generally specifies which MCA module will receive the
value.
The \fI<value>\fP argument is the value that is passed.
For example:
.
.TP 4
octl --omca oob_tcp_if_include eth0 resource status
Tells Open RCM to use eth0 as the interface to query the node state.
.
.PP
The \fI--omca\fP switch can be used multiple times to specify different
\fI<key>\fP and/or \fI<value>\fP arguments.  If the same \fI<key>\fP is
specified more than once, the \fI<value>\fPs are concatenated with a comma
(",") separating them.
.PP
Note that the \fI--omca\fP switch is simply a shortcut for setting environment
variables. The same effect may be accomplished by setting corresponding
environment variables before running \fIoctl\fP.
The form of the environment variables that Open RCM sets is:

ORCM_MCA_<key>=<value>
.PP
Thus, the \fI--omca\fP switch overrides any previously set environment
variables.  The \fI--omca\fP settings similarly override MCA parameters set
in the
$OPAL_PREFIX/etc/openmpi-mca-params.conf or $HOME/.openmpi/mca-params.conf
file.
.
.PP
Unknown \fI<key>\fP arguments are still set as
environment variable -- they are not checked (by \fIoctl\fP) for correctness.
Illegal or incorrect \fI<value>\fP arguments may or may not be reported -- it
depends on the specific MCA module.
.PP
To find the available component types under the MCA architecture, or to find the
available parameters for a specific component, use the \fIorcm-info\fP command.
See the \fIorcm-info(1)\fP man page for detailed information on the command.
.
.
.SS ORCM Node Regex
The Open RCM node regex is specified when a set of nodes have a similar name
prefix.  The prefix is stripped and the numbering that follows is turned into a
padding specification and hyphenated range, comma separated list, or combination
of both.  The padding specification is the total number of digits including 0
padded digits.  The regex for a single node is the full nodename.  For nodenames
that have different padding, the full regex is a comma separated list of regex
for each similarly padded node range.
.PP
For example:
.
.TP 4
node001,node002 : node[3:1-2]
.TP 4
node1,node2 : node[1:1-2]
.TP 4
node1,node2,node3,node4 : node[1:1-4]
.TP 4
node009,node010 : node[3:9-10]
.TP 4
node9,node10 : node[1:9],node[2:10]
.TP 4
node001,node002,node003,abc001,abc002 : node[3:1-3],abc[3:1-2]
.
.
.\" **************************
.\"    Examples Section
.\" **************************
.SH EXAMPLES
Interactive mode takes the same commands and options as the one-shot.  The
exception is that you need to pass MCA options to the octl command as the
interactive shell will not parse the MCA options.
.
.TP 4
octl resource status
Get the state of all resources
.
.
.TP 4
octl queue status
Get the state of all queues
.
.
.\" **************************
.\"    See Also Section
.\" **************************
.
.SH SEE ALSO
ocli(1) orun(1) osub(1) orcm-info(1)
.
